// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: proto/shortener.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Shrotener_CreateShortURL_FullMethodName  = "/shortener.Shrotener/CreateShortURL"
	Shrotener_GetShortURL_FullMethodName     = "/shortener.Shrotener/GetShortURL"
	Shrotener_BatchShortURLs_FullMethodName  = "/shortener.Shrotener/BatchShortURLs"
	Shrotener_DeleteShortURLs_FullMethodName = "/shortener.Shrotener/DeleteShortURLs"
	Shrotener_GetShortURLs_FullMethodName    = "/shortener.Shrotener/GetShortURLs"
	Shrotener_GetStats_FullMethodName        = "/shortener.Shrotener/GetStats"
)

// ShrotenerClient is the client API for Shrotener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShrotenerClient interface {
	CreateShortURL(ctx context.Context, in *CreateShortURLRequest, opts ...grpc.CallOption) (*CreateShortURLResponse, error)
	GetShortURL(ctx context.Context, in *GetShortURLRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BatchShortURLs(ctx context.Context, in *CreateBatchShortURLsRequest, opts ...grpc.CallOption) (*CreateBatchShortURLsResponse, error)
	DeleteShortURLs(ctx context.Context, in *DeleteURLRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetShortURLs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetShortURLsResponse, error)
	GetStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStatsResponse, error)
}

type shrotenerClient struct {
	cc grpc.ClientConnInterface
}

func NewShrotenerClient(cc grpc.ClientConnInterface) ShrotenerClient {
	return &shrotenerClient{cc}
}

func (c *shrotenerClient) CreateShortURL(ctx context.Context, in *CreateShortURLRequest, opts ...grpc.CallOption) (*CreateShortURLResponse, error) {
	out := new(CreateShortURLResponse)
	err := c.cc.Invoke(ctx, Shrotener_CreateShortURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shrotenerClient) GetShortURL(ctx context.Context, in *GetShortURLRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Shrotener_GetShortURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shrotenerClient) BatchShortURLs(ctx context.Context, in *CreateBatchShortURLsRequest, opts ...grpc.CallOption) (*CreateBatchShortURLsResponse, error) {
	out := new(CreateBatchShortURLsResponse)
	err := c.cc.Invoke(ctx, Shrotener_BatchShortURLs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shrotenerClient) DeleteShortURLs(ctx context.Context, in *DeleteURLRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Shrotener_DeleteShortURLs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shrotenerClient) GetShortURLs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetShortURLsResponse, error) {
	out := new(GetShortURLsResponse)
	err := c.cc.Invoke(ctx, Shrotener_GetShortURLs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shrotenerClient) GetStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, Shrotener_GetStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShrotenerServer is the server API for Shrotener service.
// All implementations must embed UnimplementedShrotenerServer
// for forward compatibility
type ShrotenerServer interface {
	CreateShortURL(context.Context, *CreateShortURLRequest) (*CreateShortURLResponse, error)
	GetShortURL(context.Context, *GetShortURLRequest) (*emptypb.Empty, error)
	BatchShortURLs(context.Context, *CreateBatchShortURLsRequest) (*CreateBatchShortURLsResponse, error)
	DeleteShortURLs(context.Context, *DeleteURLRequest) (*emptypb.Empty, error)
	GetShortURLs(context.Context, *emptypb.Empty) (*GetShortURLsResponse, error)
	GetStats(context.Context, *emptypb.Empty) (*GetStatsResponse, error)
	mustEmbedUnimplementedShrotenerServer()
}

// UnimplementedShrotenerServer must be embedded to have forward compatible implementations.
type UnimplementedShrotenerServer struct {
}

func (UnimplementedShrotenerServer) CreateShortURL(context.Context, *CreateShortURLRequest) (*CreateShortURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortURL not implemented")
}
func (UnimplementedShrotenerServer) GetShortURL(context.Context, *GetShortURLRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortURL not implemented")
}
func (UnimplementedShrotenerServer) BatchShortURLs(context.Context, *CreateBatchShortURLsRequest) (*CreateBatchShortURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchShortURLs not implemented")
}
func (UnimplementedShrotenerServer) DeleteShortURLs(context.Context, *DeleteURLRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShortURLs not implemented")
}
func (UnimplementedShrotenerServer) GetShortURLs(context.Context, *emptypb.Empty) (*GetShortURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortURLs not implemented")
}
func (UnimplementedShrotenerServer) GetStats(context.Context, *emptypb.Empty) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedShrotenerServer) mustEmbedUnimplementedShrotenerServer() {}

// UnsafeShrotenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShrotenerServer will
// result in compilation errors.
type UnsafeShrotenerServer interface {
	mustEmbedUnimplementedShrotenerServer()
}

func RegisterShrotenerServer(s grpc.ServiceRegistrar, srv ShrotenerServer) {
	s.RegisterService(&Shrotener_ServiceDesc, srv)
}

func _Shrotener_CreateShortURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShrotenerServer).CreateShortURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shrotener_CreateShortURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShrotenerServer).CreateShortURL(ctx, req.(*CreateShortURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shrotener_GetShortURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShrotenerServer).GetShortURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shrotener_GetShortURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShrotenerServer).GetShortURL(ctx, req.(*GetShortURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shrotener_BatchShortURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBatchShortURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShrotenerServer).BatchShortURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shrotener_BatchShortURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShrotenerServer).BatchShortURLs(ctx, req.(*CreateBatchShortURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shrotener_DeleteShortURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShrotenerServer).DeleteShortURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shrotener_DeleteShortURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShrotenerServer).DeleteShortURLs(ctx, req.(*DeleteURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shrotener_GetShortURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShrotenerServer).GetShortURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shrotener_GetShortURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShrotenerServer).GetShortURLs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shrotener_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShrotenerServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shrotener_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShrotenerServer).GetStats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Shrotener_ServiceDesc is the grpc.ServiceDesc for Shrotener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shrotener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shortener.Shrotener",
	HandlerType: (*ShrotenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShortURL",
			Handler:    _Shrotener_CreateShortURL_Handler,
		},
		{
			MethodName: "GetShortURL",
			Handler:    _Shrotener_GetShortURL_Handler,
		},
		{
			MethodName: "BatchShortURLs",
			Handler:    _Shrotener_BatchShortURLs_Handler,
		},
		{
			MethodName: "DeleteShortURLs",
			Handler:    _Shrotener_DeleteShortURLs_Handler,
		},
		{
			MethodName: "GetShortURLs",
			Handler:    _Shrotener_GetShortURLs_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _Shrotener_GetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/shortener.proto",
}
