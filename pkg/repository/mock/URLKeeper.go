// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/URLKeeper.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	models "go_link_shortener/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockURLKeeper is a mock of URLKeeper interface.
type MockURLKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockURLKeeperMockRecorder
}

// MockURLKeeperMockRecorder is the mock recorder for MockURLKeeper.
type MockURLKeeperMockRecorder struct {
	mock *MockURLKeeper
}

// NewMockURLKeeper creates a new mock instance.
func NewMockURLKeeper(ctrl *gomock.Controller) *MockURLKeeper {
	mock := &MockURLKeeper{ctrl: ctrl}
	mock.recorder = &MockURLKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLKeeper) EXPECT() *MockURLKeeperMockRecorder {
	return m.recorder
}

// BatchInsertShortURLS mocks base method.
func (m *MockURLKeeper) BatchInsertShortURLS(ctx context.Context, entries []models.BatchInsertURLEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchInsertShortURLS", ctx, entries)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchInsertShortURLS indicates an expected call of BatchInsertShortURLS.
func (mr *MockURLKeeperMockRecorder) BatchInsertShortURLS(ctx, entries interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchInsertShortURLS", reflect.TypeOf((*MockURLKeeper)(nil).BatchInsertShortURLS), ctx, entries)
}

// FindByID mocks base method.
func (m *MockURLKeeper) FindByID(ctx context.Context, id string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(string)
	return ret0
}

// FindByID indicates an expected call of FindByID.
func (mr *MockURLKeeperMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockURLKeeper)(nil).FindByID), ctx, id)
}

// FindByLink mocks base method.
func (m *MockURLKeeper) FindByLink(ctx context.Context, link string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByLink", ctx, link)
	ret0, _ := ret[0].(string)
	return ret0
}

// FindByLink indicates an expected call of FindByLink.
func (mr *MockURLKeeperMockRecorder) FindByLink(ctx, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByLink", reflect.TypeOf((*MockURLKeeper)(nil).FindByLink), ctx, link)
}

// GetNumberOfEntries mocks base method.
func (m *MockURLKeeper) GetNumberOfEntries(ctx context.Context) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumberOfEntries", ctx)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetNumberOfEntries indicates an expected call of GetNumberOfEntries.
func (mr *MockURLKeeperMockRecorder) GetNumberOfEntries(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumberOfEntries", reflect.TypeOf((*MockURLKeeper)(nil).GetNumberOfEntries), ctx)
}

// PingConnect mocks base method.
func (m *MockURLKeeper) PingConnect(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingConnect", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingConnect indicates an expected call of PingConnect.
func (mr *MockURLKeeperMockRecorder) PingConnect(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingConnect", reflect.TypeOf((*MockURLKeeper)(nil).PingConnect), ctx)
}

// SetShortURL mocks base method.
func (m *MockURLKeeper) SetShortURL(ctx context.Context, token, url string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetShortURL", ctx, token, url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetShortURL indicates an expected call of SetShortURL.
func (mr *MockURLKeeperMockRecorder) SetShortURL(ctx, token, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetShortURL", reflect.TypeOf((*MockURLKeeper)(nil).SetShortURL), ctx, token, url)
}
